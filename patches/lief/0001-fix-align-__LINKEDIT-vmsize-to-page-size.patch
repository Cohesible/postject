From aef5d3fd4ca5e8efd07bcce35adad2becd01c453 Mon Sep 17 00:00:00 2001
From: David Sanders <david.sanders@postman.com>
Date: Wed, 15 Jun 2022 23:49:15 -0700
Subject: [PATCH] fix: align __LINKEDIT vmsize to page size

---
 include/LIEF/MachO/Binary.hpp |  2 ++
 src/MachO/Binary.cpp          | 10 +++++++---
 src/MachO/Builder.tcc         |  2 +-
 tests/macho/test_builder.py   | 16 ++++++++++++++++
 4 files changed, 26 insertions(+), 4 deletions(-)

diff --git a/include/LIEF/MachO/Binary.hpp b/include/LIEF/MachO/Binary.hpp
index 5c8853a..7d83b01 100644
--- a/include/LIEF/MachO/Binary.hpp
+++ b/include/LIEF/MachO/Binary.hpp
@@ -655,6 +655,8 @@ class LIEF_API Binary : public LIEF::Binary  {
     return in_memory_base_addr_;
   }
 
+  uint32_t get_segment_alignment() const;
+
   private:
   //! Default constructor
   Binary();
diff --git a/src/MachO/Binary.cpp b/src/MachO/Binary.cpp
index ff4e80d..499a2c0 100644
--- a/src/MachO/Binary.cpp
+++ b/src/MachO/Binary.cpp
@@ -700,6 +700,12 @@ ok_error_t Binary::shift_linkedit(size_t width) {
   return ok();
 }
 
+uint32_t Binary::get_segment_alignment() const {
+  const bool is_arm = header().cpu_type() == CPU_TYPES::CPU_TYPE_ARM ||
+                      header().cpu_type() == CPU_TYPES::CPU_TYPE_ARM64;
+  return is_arm ? 0x4000 : 0x1000;
+}
+
 void Binary::shift_command(size_t width, size_t from_offset) {
   const SegmentCommand* segment = segment_from_offset(from_offset);
 
@@ -1517,9 +1523,7 @@ LoadCommand* Binary::add(const SegmentCommand& segment) {
    */
 
   LIEF_DEBUG("Adding the new segment '{}' ({} bytes)", segment.name(), segment.content().size());
-  const bool is_arm = header().cpu_type() == CPU_TYPES::CPU_TYPE_ARM ||
-                      header().cpu_type() == CPU_TYPES::CPU_TYPE_ARM64;
-  const uint32_t alignment = is_arm ? 0x4000 : 0x1000;
+  const uint32_t alignment = get_segment_alignment();
   const uint64_t new_fsize = align(segment.content().size(), alignment);
   SegmentCommand new_segment = segment;
 
diff --git a/src/MachO/Builder.tcc b/src/MachO/Builder.tcc
index c37593a..5757efe 100644
--- a/src/MachO/Builder.tcc
+++ b/src/MachO/Builder.tcc
@@ -132,7 +132,7 @@ ok_error_t Builder::build_segments() {
     std::copy(seg_name.c_str(), seg_name.c_str() + segname_length,
               std::begin(segment_header.segname));
     if (LinkEdit::segmentof(segment) && config_.linkedit) {
-      segment_header.vmsize   = static_cast<uint__>(linkedit_.size());
+      segment_header.vmsize   = static_cast<uint__>(align(linkedit_.size(), binary->get_segment_alignment()));
       segment_header.filesize = static_cast<uint__>(linkedit_.size());
     } else {
       segment_header.vmsize = static_cast<uint__>(segment.virtual_size());
diff --git a/tests/macho/test_builder.py b/tests/macho/test_builder.py
index bbad5d0..90d7de4 100644
--- a/tests/macho/test_builder.py
+++ b/tests/macho/test_builder.py
@@ -533,3 +533,19 @@ def test_break(tmp_path):
             print(stdout)
             assert re.search(r'All tests PASS', stdout) is not None
 
+def test_issue_726(tmp_path):
+    for filename in ("MachO/mbedtls_selftest_arm64.bin", "MachO/mbedtls_selftest_x86_64.bin"):
+        bin_path = pathlib.Path(get_sample(filename))
+        original = lief.parse(bin_path.as_posix())
+        output = f"{tmp_path}/{bin_path.name}"
+
+        original.write(output)
+        new = lief.parse(output)
+
+        for parsed in (original, new):
+            if parsed.header.cpu_type == lief.MachO.CPU_TYPES.x86_64:
+                alignment = 0x1000
+            elif original.header.cpu_type == lief.MachO.CPU_TYPES.ARM64:
+                alignment = 0x4000
+
+            assert parsed.get_segment("__LINKEDIT").virtual_size % alignment == 0
-- 
2.32.0 (Apple Git-132)

